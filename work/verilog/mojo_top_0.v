/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [29:0] M_counter_d, M_counter_q = 1'h0;
  localparam START_state = 5'd0;
  localparam ADDERTEST1_state = 5'd1;
  localparam ADDERTEST2_state = 5'd2;
  localparam ADDERTEST3_state = 5'd3;
  localparam ADDERTEST4_state = 5'd4;
  localparam ADDERTEST5_state = 5'd5;
  localparam ADDERTESTERROR_state = 5'd6;
  localparam ADDERERROR_state = 5'd7;
  localparam BOOLEANTEST1_state = 5'd8;
  localparam BOOLEANTEST2_state = 5'd9;
  localparam BOOLEANTEST3_state = 5'd10;
  localparam BOOLEANTEST4_state = 5'd11;
  localparam BOOLEANTESTERROR_state = 5'd12;
  localparam BOOLEANERROR_state = 5'd13;
  localparam SHIFTTEST1_state = 5'd14;
  localparam SHIFTTEST2_state = 5'd15;
  localparam SHIFTTEST3_state = 5'd16;
  localparam SHIFTTESTERROR_state = 5'd17;
  localparam SHIFTERROR_state = 5'd18;
  localparam COMPTEST1_state = 5'd19;
  localparam COMPTEST2_state = 5'd20;
  localparam COMPTEST3_state = 5'd21;
  localparam COMPTEST4_state = 5'd22;
  localparam COMPTEST5_state = 5'd23;
  localparam COMPTEST6_state = 5'd24;
  localparam COMPTESTERROR_state = 5'd25;
  localparam COMPERROR_state = 5'd26;
  localparam END_state = 5'd27;
  
  reg [4:0] M_state_d, M_state_q = START_state;
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_2 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  reg [7:0] a;
  
  reg [7:0] b;
  
  reg [5:0] alufn;
  
  reg [7:0] alu;
  
  localparam X = 5'h1d;
  
  wire [8-1:0] M_alu1_alu_output;
  reg [6-1:0] M_alu1_alufn;
  reg [8-1:0] M_alu1_a;
  reg [8-1:0] M_alu1_b;
  alu_3 alu1 (
    .alufn(M_alu1_alufn),
    .a(M_alu1_a),
    .b(M_alu1_b),
    .alu_output(M_alu1_alu_output)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    a = io_dip[0+7-:8];
    b = io_dip[8+7-:8];
    alufn = io_dip[16+0+5-:6];
    M_alu1_a = a;
    M_alu1_b = b;
    M_alu1_alufn = alufn;
    alu = M_alu1_alu_output;
    io_led[16+7-:8] = alu;
    io_led[0+7-:8] = a;
    io_led[8+7-:8] = b;
    M_seg_values = 16'heeee;
    
    case (M_state_q)
      START_state: begin
        M_counter_d = 1'h0;
        M_seg_values = 16'hdeee;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (io_button[1+0-:1] == 1'h1) begin
          M_state_d = ADDERTEST1_state;
        end
      end
      ADDERTEST1_state: begin
        M_alu1_alufn = 6'h00;
        M_alu1_a = 8'h80;
        M_alu1_b = 8'h81;
        io_led[0+7-:8] = 8'h80;
        io_led[8+7-:8] = 8'h81;
        alu = M_alu1_alu_output;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'haaa1;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h01) begin
          M_counter_d = 1'h0;
          M_state_d = ADDERTEST2_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h01) begin
            M_counter_d = 1'h0;
            M_state_d = ADDERERROR_state;
          end
        end
      end
      ADDERTEST2_state: begin
        M_alu1_alufn = 6'h01;
        M_alu1_a = 8'h80;
        M_alu1_b = 8'h81;
        io_led[0+7-:8] = 8'h80;
        io_led[8+7-:8] = 8'h81;
        alu = M_alu1_alu_output;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'haaa2;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'hff) begin
          M_counter_d = 1'h0;
          M_state_d = ADDERTEST3_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'hff) begin
            M_counter_d = 1'h0;
            M_state_d = ADDERERROR_state;
          end
        end
      end
      ADDERTEST3_state: begin
        M_alu1_alufn = 6'h00;
        M_alu1_a = 8'h02;
        M_alu1_b = 8'h5a;
        io_led[0+7-:8] = 8'h02;
        io_led[8+7-:8] = 8'h5a;
        alu = M_alu1_alu_output;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'haaa3;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h5c) begin
          M_counter_d = 1'h0;
          M_state_d = ADDERTEST4_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h5c) begin
            M_counter_d = 1'h0;
            M_state_d = ADDERERROR_state;
          end
        end
      end
      ADDERTEST4_state: begin
        M_alu1_alufn = 6'h00;
        M_alu1_a = 8'h7f;
        M_alu1_b = 8'h7f;
        io_led[0+7-:8] = 8'h7f;
        io_led[8+7-:8] = 8'h7f;
        alu = M_alu1_alu_output;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'haaa4;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'hfe) begin
          M_counter_d = 1'h0;
          M_state_d = ADDERTEST5_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'hfe) begin
            M_counter_d = 1'h0;
            M_state_d = ADDERERROR_state;
          end
        end
      end
      ADDERTEST5_state: begin
        M_alu1_alufn = 6'h02;
        M_alu1_a = 8'h03;
        M_alu1_b = 8'h03;
        io_led[0+7-:8] = 8'h03;
        io_led[8+7-:8] = 8'h03;
        alu = M_alu1_alu_output;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'haaa5;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h09) begin
          M_counter_d = 1'h0;
          M_state_d = ADDERTESTERROR_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h09) begin
            M_counter_d = 1'h0;
            M_state_d = ADDERERROR_state;
          end
        end
      end
      ADDERTESTERROR_state: begin
        M_alu1_alufn = 6'h00;
        M_alu1_a = 9'h006;
        M_alu1_b = 8'h04;
        io_led[0+7-:8] = 8'h05;
        io_led[8+7-:8] = 8'h04;
        alu = M_alu1_alu_output;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'haaa6;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h09) begin
          M_counter_d = 1'h0;
          M_state_d = BOOLEANTEST1_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h09) begin
            M_counter_d = 1'h0;
            M_state_d = ADDERERROR_state;
          end
        end
      end
      ADDERERROR_state: begin
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'haeef;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[29+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = BOOLEANTEST1_state;
        end
      end
      BOOLEANTEST1_state: begin
        M_alu1_alufn = 6'h1a;
        M_alu1_a = 8'hf8;
        M_alu1_b = 8'h1f;
        io_led[0+7-:8] = 8'hf8;
        io_led[8+7-:8] = 8'h1f;
        alu = M_alu1_alu_output;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hbbb1;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'hf8) begin
          M_counter_d = 1'h0;
          M_state_d = BOOLEANTEST2_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'hf8) begin
            M_counter_d = 1'h0;
            M_state_d = BOOLEANERROR_state;
          end
        end
      end
      BOOLEANTEST2_state: begin
        M_alu1_alufn = 6'h18;
        M_alu1_a = 8'hf8;
        M_alu1_b = 8'h1f;
        io_led[0+7-:8] = 8'hf8;
        io_led[8+7-:8] = 8'h1f;
        alu = M_alu1_alu_output;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hbbb2;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h18) begin
          M_counter_d = 1'h0;
          M_state_d = BOOLEANTEST3_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h18) begin
            M_counter_d = 1'h0;
            M_state_d = BOOLEANERROR_state;
          end
        end
      end
      BOOLEANTEST3_state: begin
        M_alu1_alufn = 6'h1e;
        M_alu1_a = 8'hf8;
        M_alu1_b = 8'h1f;
        io_led[0+7-:8] = 8'hf8;
        io_led[8+7-:8] = 8'h1f;
        alu = M_alu1_alu_output;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hbbb3;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'hff) begin
          M_counter_d = 1'h0;
          M_state_d = BOOLEANTEST4_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'hff) begin
            M_counter_d = 1'h0;
            M_state_d = BOOLEANERROR_state;
          end
        end
      end
      BOOLEANTEST4_state: begin
        M_alu1_alufn = 6'h16;
        M_alu1_a = 8'hf8;
        M_alu1_b = 8'h1f;
        io_led[0+7-:8] = 8'hf8;
        io_led[8+7-:8] = 8'h1f;
        alu = M_alu1_alu_output;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hbbb4;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'he7) begin
          M_counter_d = 1'h0;
          M_state_d = BOOLEANTESTERROR_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'he7) begin
            M_counter_d = 1'h0;
            M_state_d = BOOLEANERROR_state;
          end
        end
      end
      BOOLEANTESTERROR_state: begin
        M_alu1_alufn = 6'h16;
        M_alu1_a = 9'h0f9;
        M_alu1_b = 8'h1f;
        io_led[0+7-:8] = 8'hf8;
        io_led[8+7-:8] = 8'h1f;
        alu = M_alu1_alu_output;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hbbb5;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'he7) begin
          M_counter_d = 1'h0;
          M_state_d = SHIFTTEST1_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'he7) begin
            M_counter_d = 1'h0;
            M_state_d = BOOLEANERROR_state;
          end
        end
      end
      BOOLEANERROR_state: begin
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hbeef;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[29+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = SHIFTTEST1_state;
        end
      end
      SHIFTTEST1_state: begin
        M_alu1_alufn = 6'h20;
        M_alu1_a = 8'h40;
        M_alu1_b = 8'h01;
        io_led[0+7-:8] = 8'h40;
        io_led[8+7-:8] = 8'h01;
        alu = M_alu1_alu_output;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hddd1;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h80) begin
          M_counter_d = 1'h0;
          M_state_d = SHIFTTEST2_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h80) begin
            M_counter_d = 1'h0;
            M_state_d = SHIFTERROR_state;
          end
        end
      end
      SHIFTTEST2_state: begin
        M_alu1_alufn = 6'h21;
        M_alu1_a = 8'hf0;
        M_alu1_b = 8'h04;
        io_led[0+7-:8] = 8'hf0;
        io_led[8+7-:8] = 8'h04;
        alu = M_alu1_alu_output;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hddd2;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h0f) begin
          M_counter_d = 1'h0;
          M_state_d = SHIFTTEST3_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h0f) begin
            M_counter_d = 1'h0;
            M_state_d = SHIFTERROR_state;
          end
        end
      end
      SHIFTTEST3_state: begin
        M_alu1_alufn = 6'h23;
        M_alu1_a = 8'hf0;
        M_alu1_b = 8'h04;
        io_led[0+7-:8] = 8'hf0;
        io_led[8+7-:8] = 8'h04;
        alu = M_alu1_alu_output;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hddd3;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'hff) begin
          M_counter_d = 1'h0;
          M_state_d = SHIFTTESTERROR_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'hff) begin
            M_counter_d = 1'h0;
            M_state_d = SHIFTERROR_state;
          end
        end
      end
      SHIFTTESTERROR_state: begin
        M_alu1_alufn = 6'h23;
        M_alu1_a = 9'h0f1;
        M_alu1_b = 8'h01;
        io_led[0+7-:8] = 8'hf0;
        io_led[8+7-:8] = 8'h01;
        alu = M_alu1_alu_output;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hddd4;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'he0) begin
          M_counter_d = 1'h0;
          M_state_d = COMPTEST1_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'he0) begin
            M_counter_d = 1'h0;
            M_state_d = SHIFTERROR_state;
          end
        end
      end
      SHIFTERROR_state: begin
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hdeef;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[29+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = COMPTEST1_state;
        end
      end
      COMPTEST1_state: begin
        M_alu1_alufn = 6'h33;
        M_alu1_a = 8'h7f;
        M_alu1_b = 8'h7f;
        io_led[0+7-:8] = 8'h7f;
        io_led[8+7-:8] = 8'h7f;
        alu = M_alu1_alu_output;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hccc1;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h01) begin
          M_counter_d = 1'h0;
          M_state_d = COMPTEST2_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h01) begin
            M_counter_d = 1'h0;
            M_state_d = COMPERROR_state;
          end
        end
      end
      COMPTEST2_state: begin
        M_alu1_alufn = 6'h33;
        M_alu1_a = 8'h7f;
        M_alu1_b = 8'h7e;
        io_led[0+7-:8] = 8'h7f;
        io_led[8+7-:8] = 8'h7e;
        alu = M_alu1_alu_output;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hccc2;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h00) begin
          M_counter_d = 1'h0;
          M_state_d = COMPTEST3_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h00) begin
            M_counter_d = 1'h0;
            M_state_d = COMPERROR_state;
          end
        end
      end
      COMPTEST3_state: begin
        M_alu1_alufn = 6'h35;
        M_alu1_a = 8'h7f;
        M_alu1_b = 8'h7e;
        io_led[0+7-:8] = 8'h7f;
        io_led[8+7-:8] = 8'h7e;
        alu = M_alu1_alu_output;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hccc3;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h00) begin
          M_counter_d = 1'h0;
          M_state_d = COMPTEST4_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h00) begin
            M_counter_d = 1'h0;
            M_state_d = COMPERROR_state;
          end
        end
      end
      COMPTEST4_state: begin
        M_alu1_alufn = 6'h35;
        M_alu1_a = 8'h7e;
        M_alu1_b = 8'h7f;
        io_led[0+7-:8] = 8'h7e;
        io_led[8+7-:8] = 8'h7f;
        alu = M_alu1_alu_output;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hccc4;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h01) begin
          M_counter_d = 1'h0;
          M_state_d = COMPTEST5_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h01) begin
            M_counter_d = 1'h0;
            M_state_d = COMPERROR_state;
          end
        end
      end
      COMPTEST5_state: begin
        M_alu1_alufn = 6'h37;
        M_alu1_a = 8'h7e;
        M_alu1_b = 8'h7f;
        io_led[0+7-:8] = 8'h7e;
        io_led[8+7-:8] = 8'h7f;
        alu = M_alu1_alu_output;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hccc5;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h01) begin
          M_counter_d = 1'h0;
          M_state_d = COMPTEST6_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h01) begin
            M_counter_d = 1'h0;
            M_state_d = COMPERROR_state;
          end
        end
      end
      COMPTEST6_state: begin
        M_alu1_alufn = 6'h37;
        M_alu1_a = 8'h7f;
        M_alu1_b = 8'h7e;
        io_led[0+7-:8] = 8'h7f;
        io_led[8+7-:8] = 8'h7e;
        alu = M_alu1_alu_output;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hccc6;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h00) begin
          M_counter_d = 1'h0;
          M_state_d = COMPTESTERROR_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h00) begin
            M_counter_d = 1'h0;
            M_state_d = COMPERROR_state;
          end
        end
      end
      COMPTESTERROR_state: begin
        M_alu1_alufn = 6'h33;
        M_alu1_a = 9'h07f;
        M_alu1_b = 8'h7e;
        io_led[0+7-:8] = 8'h7e;
        io_led[8+7-:8] = 8'h7e;
        alu = M_alu1_alu_output;
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hccc7;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[29+0-:1] == 1'h1 && alu == 8'h01) begin
          M_counter_d = 1'h0;
          M_state_d = END_state;
        end else begin
          if (M_counter_q[29+0-:1] == 1'h1 && alu != 8'h01) begin
            M_counter_d = 1'h0;
            M_state_d = COMPERROR_state;
          end
        end
      end
      COMPERROR_state: begin
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hceef;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[29+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = END_state;
        end
      end
      END_state: begin
        M_counter_d = M_counter_q + 1'h1;
        M_seg_values = 16'hfeee;
        io_seg = ~M_seg_seg;
        io_sel = ~M_seg_sel;
        if (M_counter_q[29+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = START_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
